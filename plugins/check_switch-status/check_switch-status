#!/usr/bin/python3
# -*- coding: utf-8 -*-

import optparse
import operator
import pyhelper


def check_port(option, opt_str, value, parser):
    _ = option
    if not (1 <= value <= 65535):
        raise optparse.OptionValueError("%s option invalid port number" % opt_str)
    parser.values.port = value


def parse_options():
    optp = optparse.OptionParser()
    optp.add_option('--host', dest='host', help="IP or hostname of the switch")
    optp.add_option('--community', dest='community', help="SNMP Community string (switches to Version 2c if set")
    optp.add_option('--snmp_port', dest='snmp_port', type='int', action='callback', callback=check_port, default=161,
                    help="SNMP Port. Default: 161")
    optp.add_option('--snmp_version', dest='snmp_version', default='3', help="not used anymore")
    optp.add_option('--snmp_secName', dest='snmp_secName', help="SNMP secName")
    optp.add_option('--snmp_authProtocol', dest='snmp_authProtocol', help="SNMP authProtocol")
    optp.add_option('--snmp_authPassword', dest='snmp_authPassword', help="SNMP authPassword")
    optp.add_option('--snmp_secLevel', dest='snmp_secLevel', help="SNMP secLevel")
    optp.add_option('--snmp_privProtocol', dest='snmp_privProtocol', help="SNMP privProtocol")
    optp.add_option('--snmp_privPassword', dest='snmp_privPassword', help="SNMP privPassword")
    optp.add_option('--temp-warn', dest='temp_warn', type='int', default=50, help="Warning threshold for temperature")
    optp.add_option('--temp-crit', dest='temp_crit', type='int', default=60, help="Critical threshold for temperature")
    optp.add_option('--cpu-warn', dest='cpu_warn', type='int', default=60, help="Warning threshold for CPU")
    optp.add_option('--cpu-crit', dest='cpu_crit', type='int', default=70, help="Critical threshold for CPU")
    optp.add_option('--mem-warn', dest='mem_warn', type='int', default=80, help="Warning threshold for RAM")
    optp.add_option('--mem-crit', dest='mem_crit', type='int', default=90, help="Critical threshold for RAM")
    optp.add_option('--no-alert-for-power-supply', dest='no_alert_for_power_supply', action='store_true', default=False,
                    help="This option disables a warning if some power supplies are faulty (Cisco)")

    opts, args = optp.parse_args()

    if not opts.host:
        pyhelper.NagiosStatus.die("unknown", "the hostname is required")

    if opts.community:
        snmplib = pyhelper.snmp(host=opts.host, version='2c', port=opts.snmp_port, community=opts.community)
    else:
        snmplib = pyhelper.snmp(host=opts.host, version='3', port=opts.snmp_port, secName=opts.snmp_secName,
                                authPassword=opts.snmp_authPassword, authProtocol=opts.snmp_authProtocol,
                                secLevel=opts.snmp_secLevel, privProtocol=opts.snmp_privProtocol,
                                privPassword=opts.snmp_privPassword)
    return opts, snmplib


def check_dell(nagios, opts, snmplib):
    entitystate = {
        '1': 'normal',
        '2': 'warning',
        '3': 'critical',
        '4': 'shutdown',
        '5': 'notPresent',
        '6': 'notFunctioning',
    }
    unitstate = {
        '3': 'ok',
        '4': 'non-critical',
        '5': 'critical',
    }
    # DELL - Powerconnect

    try:
        fans = snmplib.walk('.1.3.6.1.4.1.674.10895.3000.1.2.110.7.1.1.2', bulk=True, dictionary=False)
    except OSError:
        fans = None
    try:
        fanstate = snmplib.walk('.1.3.6.1.4.1.674.10895.3000.1.2.110.7.1.1.3', bulk=True, dictionary=False)
    except OSError:
        fanstate = None
    try:
        psu = snmplib.walk('.1.3.6.1.4.1.674.10895.3000.1.2.110.7.2.1.2', bulk=True, dictionary=False)
    except OSError:
        psu = None
    try:
        psustate = snmplib.walk('.1.3.6.1.4.1.674.10895.3000.1.2.110.7.2.1.3', bulk=True, dictionary=False)
    except OSError:
        psustate = None
    try:
        cpuusage = snmplib.get('.1.3.6.1.4.1.674.10895.5000.2.6132.1.1.1.1.4.4.0')
    except OSError:
        cpuusage = None
    try:
        model = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.1.0')
    except OSError:
        model = None
    try:
        vendor = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.3.0')
    except OSError:
        vendor = None
    try:
        switchname = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.7.0')
    except OSError:
        switchname = None
    try:
        serial = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.8.1.2.1')
    except OSError:
        serial = None
    try:
        product_version = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.4.0')
    except OSError:
        product_version = None
    try:
        build_version = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.5.0')
    except OSError:
        build_version = None
    try:
        service_tag = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.100.8.1.4.1')
    except OSError:
        service_tag = None
    try:
        global_status = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.110.1.0')
    except OSError:
        global_status = None
    # try:
    #    last_global_status = snmplib.get('.1.3.6.1.4.1.674.10895.3000.1.2.110.2.0')
    # except OSError:
    #    last_global_status = None

    nagios.ok('Model: %s' % model)
    nagios.ok('Vendor: %s' % vendor)
    nagios.ok('Name: %s' % switchname)
    nagios.ok('Serial number: %s' % serial)
    nagios.ok('Product Version: %s' % product_version)
    nagios.ok('Build Version: %s' % build_version)
    nagios.ok('ServiceTag: %s' % service_tag)

    try:
        tmp_stack_units = snmplib.walk('.1.3.6.1.4.1.6027.3.26.1.3.4.1.2', bulk=True, dictionary=False)
        stack_unit_ids = [el[1] for el in tmp_stack_units]
        _ = int(stack_unit_ids[0])
    except (OSError, ValueError):
        stack_unit_ids = None

    # Temperature
    # only one sensor is active, all the others show 0 or 1
    # noinspection PyBroadException
    try:
        if stack_unit_ids:
            temperature = snmplib.walk('.1.3.6.1.4.1.6027.3.26.1.3.4.1.13', bulk=True, dictionary=False)
        else:
            temperature = snmplib.walk('.1.3.6.1.4.1.674.10895.5000.2.6132.1.1.43.1.8.1', bulk=True, dictionary=False)
        temp = int(max(temperature, key=operator.itemgetter(1))[1])
        if opts.temp_warn <= temp < opts.temp_crit:
            nagios.warning('Temperature: %s°C' % temp)
        elif temp >= opts.temp_crit:
            nagios.critical('Temperature: %s°C' % temp)
        else:
            nagios.ok('Temperature: %s°C' % temp)

        nagios.ok(performance_data="dell_temp=%sC;%s;%s;0;" % (temp, opts.temp_warn, opts.temp_crit))
    except Exception:
        nagios.ok("Temperature: ???")

    # Fans
    # noinspection PyBroadException
    try:
        fanerror = 0
        fansok = 0
        for i, fan in enumerate(fanstate):
            if entitystate[fan[1]] == 'normal':
                fansok += 1
            elif entitystate[fan[1]] == 'notPresent':
                pass
            else:
                nagios.warning('%s %s' % (fans[i][1], entitystate[fan[1]]))
                fanerror += 1
        if fansok > 0:
            if fansok == 1:
                nagios.ok('1 fan (Status: normal)')
            else:
                nagios.ok('%s fans (Status: normal)' % fansok)
    except Exception:
        nagios.ok("Fans: ???")

    # power supply
    # noinspection PyBroadException
    try:
        power_supplies = []
        for i, line in enumerate(psu):
            power_supplies.append('%s (%s)' % (line[1], entitystate[psustate[i][1]]))
        nagios.ok('%s power supplies (%s)' % (len(psu), ', '.join(power_supplies)))
    except Exception:
        nagios.ok("power supplies: ???")

    # switch status
    # noinspection PyBroadException
    try:
        if unitstate[global_status] == 'ok':
            nagios.ok('GlobalStatus: ok')
        elif unitstate[global_status] == 'non-critical':
            nagios.warning('GlobalStatus: non-critical')
        else:
            nagios.critical('Globalstatus: %s' % unitstate[global_status])
    except Exception:
        nagios.ok("Globalstatus: ???")

    # switch stack status
    if stack_unit_ids:
        stack_unit_status = {
            '1': 'ok',
            '2': 'unsupported',
            '3': 'codeMismatch',
            '4': 'configMismatch',
            '5': 'unitDown',
            '6': 'notPresent',
        }
        try:
            stack_status = snmplib.walk('.1.3.6.1.4.1.6027.3.26.1.3.4.1.8', bulk=True, dictionary=False)
            for unit, state in stack_status:
                unit_id = unit.rsplit('.', 1)[1]
                if stack_unit_status[state] == 'ok':
                    nagios.ok('Unit{}Status: ok'.format(unit_id))
                else:
                    nagios.critical('Unit{}Status: {}'.format(unit_id, stack_unit_status[state]))
        except OSError:
            pass
            # nagios.unknown('stack status: ???')

    # CPU usage
    # noinspection PyBroadException
    try:
        # 5 Sec (6.04%),    1 Min (6.54%),   5 Min (6.46%)
        cpu = cpuusage.split()
        cpu_5min = cpu[8].strip('"').strip('()').replace('%', '')
        cpu_5s = cpu[2].strip(',').strip('()').replace('%', '')
        cpu_1min = cpu[5].strip(',').strip('()').replace('%', '')
        if opts.cpu_warn <= int(cpu_5min[0]) < opts.cpu_crit:
            nagios.warning('CPU usage: %s' % ' '.join(cpu))
        elif int(cpu_5min[0]) >= opts.cpu_crit:
            nagios.critical('CPU usage: %s' % ' '.join(cpu))
        else:
            nagios.ok('CPU usage: %s' % ' '.join(cpu))

        nagios.ok(performance_data="dell_cpu_5s=%s%% dell_cpu_1min=%s%% dell_cpu_5min=%s%%" %
                                   (cpu_5s, cpu_1min, cpu_5min))
    except Exception:
        nagios.ok("CPU: ???")


def check_hp(nagios, opts, snmplib):
    states = {
        '1': 'unknown',
        '2': 'bad',
        '3': 'warning',
        '4': 'good',
        '5': 'notPresent'
    }
    health = {
        '1': 'unknown',
        '2': 'unused',
        '3': 'ok',
        '4': 'warning',
        '5': 'critical',
        '6': 'nonrecoverable'
    }
    stest = {
        '1': 'stSuccess',
        '2': 'stExecute'
    }
    stestcode = {
        '1': 'ok',
        '2': 'softFailure'
    }

    cpu = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.9.6.1.0'))
    manufacturer = snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.2.4.0')
    model = snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.2.5.0')
    device_version = snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.5.1.1.11.1')
    rom_version = snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.5.1.1.13.1')
    serial = snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.5.1.1.10.1')
    description = snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.5.1.1.9.1')
    memory_total = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.5.1'))
    memory_free = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.6.1'))
    memory_alloc = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.7.1'))
    memory_slabcount = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.2.1'))
    memory_freesegcount = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.3.1'))
    memory_allocsegcount = int(snmplib.get('.1.3.6.1.4.1.11.2.14.11.5.1.1.2.1.1.1.4.1'))
    # allocseg+freeseg?slabcount

    nagios.ok("vendor: %s, model: %s, device version: %s, ROMVersion: %s, serial number: %s, description: %s"
              % (manufacturer, model, device_version, rom_version, serial, description))

    # CPU
    # noinspection PyBroadException
    try:
        cpu = int(cpu)
        if opts.cpu_warn <= cpu < opts.cpu_crit:
            nagios.warning("CPU usage: %s%%" % cpu)
        elif cpu >= opts.cpu_crit:
            nagios.critical("CPU usage: %s%%" % cpu)
        else:
            nagios.ok("CPU usage: %s%%" % cpu)

        nagios.ok(performance_data="hp_cpu=%s%%" % cpu)
    except Exception:
        nagios.ok("CPU: ???")

    # sensors
    # noinspection PyBroadException
    try:
        sensors = snmplib.walk('.1.3.6.1.4.1.11.2.14.11.1.2.6.1.1', bulk=True, dictionary=False)
        for sensor in sensors:
            descr = snmplib.get('.1.3.6.1.4.1.11.2.14.11.1.2.6.1.7.%s' % sensor[1])
            status = states[snmplib.get('.1.3.6.1.4.1.11.2.14.11.1.2.6.1.4.%s' % sensor[1])]
            if status != 'good' and status != 'notPresent':
                nagios.warning("%s: %s" % (descr, status))
            else:
                nagios.ok("%s: %s" % (descr, status))
    except Exception:
        nagios.ok("sensors: ???")

    # RAM
    # noinspection PyBroadException
    try:
        memory_percent_used = int(round((float(memory_alloc)/float(memory_total))*100.0, 0))
        _memory_total_mb = round(memory_total/1024.0/1024.0, 2)
        _memory_alloc_mb = round(memory_alloc/1024.0/1024.0, 2)
        if opts.mem_warn <= memory_percent_used < opts.mem_crit:
            nagios.warning("RAM: %s/%sMB used" % (_memory_alloc_mb, _memory_total_mb))
        elif memory_percent_used >= opts.mem_crit:
            nagios.critical("RAM: %s/%sMB used" % (_memory_alloc_mb, _memory_total_mb))
        else:
            nagios.ok("RAM: %s/%sMB used" % (_memory_alloc_mb, _memory_total_mb))

        nagios.ok(performance_data="hp_memory_total=%s hp_memory_alloc=%s hp_memory_free=%s hp_memory_slabcount=%s "
                                   "hp_memory_freesegcount=%s hp_memory_allocsegcount=%s"
                  % (memory_total, memory_alloc, memory_free, memory_slabcount, memory_freesegcount,
                     memory_allocsegcount))
    except Exception:
        nagios.ok("RAM: ???")

    # device status
    # noinspection PyBroadException
    try:
        devicehealth = health[snmplib.get('.1.3.6.1.4.1.11.2.36.1.1.5.1.1.3.1')]

        if devicehealth != 'ok':
            nagios.warning("device status: %s" % devicehealth)
        else:
            nagios.ok("device status: %s" % devicehealth)

        selftest = stest[snmplib.get('.1.3.6.1.4.1.11.2.14.11.1.4.2.0')]
        selftestresultcode = stestcode[snmplib.get('.1.3.6.1.4.1.11.2.14.11.1.4.5.1.0')]
        selftestresulttext = snmplib.get('.1.3.6.1.4.1.11.2.14.11.1.4.5.2.0')

        if selftestresultcode != 'ok':
            nagios.warning("Selftest: %s (%s - %s)" % (selftest, selftestresultcode, selftestresulttext))

        else:
            nagios.ok("Selftest: %s (%s)" % (selftest, selftestresultcode))
    except Exception:
        nagios.ok("device status: ???")

    # Telnet
    # noinspection PyBroadException
    try:
        telnet_code = {
            '1': 'enabled',
            '2': 'disabled'
        }
        telnet = telnet_code[snmplib.get('.1.3.6.1.4.1.11.2.14.11.1.4.3.0')]
        if telnet == 'enabled':
            nagios.critical("Telnet: %s" % telnet)
        else:
            nagios.ok("Telnet: %s" % telnet)

    except Exception:
        nagios.ok("Telnet: ???")


def check_cisco(nagios, opts, snmplib):
    cisco_env_mon_state = {
        '1': 'normal',
        '2': 'warning',
        '3': 'critical',
        '4': 'shutdown',
        '5': 'notPresent',
        '6': 'notFunctioning'
    }

    # Model
    # noinspection PyBroadException
    try:
        model = snmplib.get('.1.3.6.1.2.1.47.1.1.1.1.13.1').strip().strip('"').strip()
        if model != '':
            nagios.ok('Model: %s' % model)
    except Exception:
        pass

    # CPU and Memory
    cpu_ram_data = snmplib.walk('.1.3.6.1.4.1.9.9.109.1.1.1.1', bulk=True, dictionary=True)

    # CPU
    # number of CPUs
    cpu_count = 0
    for line in cpu_ram_data.keys():
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.2.' in line:
            cpu_count += 1

    # CPU usage - 5s, 1min, 5min
    cpu_usage = {'5s': [], '1min': [], '5min': []}
    for line in cpu_ram_data.keys():
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.6.' in line:
            cpu_usage['5s'].append(cpu_ram_data[line].replace('percent', '').strip())
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.7.' in line:
            cpu_usage['1min'].append(cpu_ram_data[line].replace('percent', '').strip())
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.8.' in line:
            cpu_usage['5min'].append(cpu_ram_data[line].replace('percent', '').strip())

    for cpu_id, cpu_usage_5min in enumerate(cpu_usage['5min']):
        msg = "CPU_%s (%s%%, %s%%, %s%%)" % (cpu_id,
                                             cpu_usage['5s'][cpu_id],
                                             cpu_usage['1min'][cpu_id],
                                             cpu_usage['5min'][cpu_id])

        if opts.cpu_crit > int(cpu_usage_5min) >= opts.cpu_warn:
            nagios.warning(msg)
        elif int(cpu_usage_5min) >= opts.cpu_crit:
            nagios.critical(msg)
        else:
            nagios.ok(msg)

        nagios.ok(performance_data="cisco_cpu_id%s_5s=%s cisco_cpu_id%s_1min=%s cisco_cpu_id%s_5min=%s" %
                                   (cpu_id, cpu_usage['5s'][cpu_id],
                                    cpu_id, cpu_usage['1min'][cpu_id],
                                    cpu_id, cpu_usage['5min'][cpu_id]))

    # CPU Memory Used/Free/KernelReserved
    memory_usage = {'used': [], 'free': [], 'kernel_reserved': []}
    for line in cpu_ram_data.keys():
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.12.' in line:
            memory_usage['used'].append(cpu_ram_data[line].replace('kilo-bytes', '').strip())
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.13.' in line:
            memory_usage['free'].append(cpu_ram_data[line].replace('kilo-bytes', '').strip())
        if '.1.3.6.1.4.1.9.9.109.1.1.1.1.14.' in line:
            memory_usage['kernel_reserved'].append(cpu_ram_data[line].replace('kilo-bytes', '').strip())

    for cpu_id in range(len(memory_usage['used'])):
        msg = "CPU_%s Memory: %.0f/%.0fMB belegt" %\
              (cpu_id, round(float(memory_usage['used'][cpu_id])/1024.0, 0) +
               round(float(memory_usage['kernel_reserved'][cpu_id])/1024.0, 0),
               round(float(memory_usage['free'][cpu_id])/1024.0, 0) +
               round(float(memory_usage['used'][cpu_id])/1024.0, 0) +
               round(float(memory_usage['kernel_reserved'][cpu_id])/1024.0, 0))
        nagios.ok(msg)

        nagios.ok(performance_data="cisco_mem_used_cpu_id%s=%s" % (cpu_id, memory_usage['free'][cpu_id]))
        nagios.ok(performance_data="cisco_mem_free_cpu_id%s=%s" % (cpu_id, memory_usage['used'][cpu_id]))
        nagios.ok(performance_data="cisco_mem_kernelreserved_cpu_id%s=%s" %
                                   (cpu_id, memory_usage['kernel_reserved'][cpu_id]))

    # get data for temperature, fans and power supply
    fan_temp_psu_data = snmplib.walk('.1.3.6.1.4.1.9.9.13.1', bulk=True, dictionary=True)

    # fans
    fans = 0
    fans_not_ok = 0
    for line in fan_temp_psu_data.keys():
        if '.1.3.6.1.4.1.9.9.13.1.4.1.2.' in line:
            fans += 1
            fan_id = line.replace('.1.3.6.1.4.1.9.9.13.1.4.1.2.', '')
            fan_descr = fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.4.1.2.%s' % fan_id]
            fan_state = cisco_env_mon_state[fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.4.1.3.%s' % fan_id]]

            if fan_state != 'normal':
                fans_not_ok += 1
                nagios.critical("Fans: '%s' --> %s" % (fan_descr, fan_state))

    if fans != 0:
        if fans == fans-fans_not_ok:
            nagios.ok("%s Fans (Status: all ok)" % fans)
        else:
            nagios.ok("%s Fans (Status: %s ok)" % (fans, fans - fans_not_ok))

    # power supply
    psus = 0
    psus_not_ok = 0
    for line in fan_temp_psu_data.keys():
        if '.1.3.6.1.4.1.9.9.13.1.5.1.2.' in line:
            psus += 1
            psu_id = line.replace('.1.3.6.1.4.1.9.9.13.1.5.1.2.', '')
            psu_descr = fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.5.1.2.%s' % psu_id]
            psu_state = cisco_env_mon_state[fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.5.1.3.%s' % psu_id]]

            if psu_state != 'normal':
                psus_not_ok += 1
                if psu_state == 'notPresent':
                    nagios.ok("power supply: '%s' --> %s " % (psu_descr, psu_state))
                    continue
                if not opts.no_alert_for_power_supply:
                    nagios.critical("power supply: '%s' --> %s " % (psu_descr, psu_state))

    if psus_not_ok == 0:
        if psus > 1:
            nagios.ok("%s power supplies (Status: all ok)" % psus)
        else:
            nagios.ok("1 power supply (Status: ok)")

    else:
        if psus > 1:
            nagios.ok("%s power supplies (Status: %s ok)" % (psus, psus - psus_not_ok))
        else:
            nagios.ok("%s power supply (Status: %s ok)" % (psus, psus - psus_not_ok))

    # temperatures
    tsensors = 0
    tsensors_not_ok = 0
    for line in fan_temp_psu_data.keys():
        if '.1.3.6.1.4.1.9.9.13.1.3.1.2.' in line:
            tsensors += 1
            tsensor_id = line.replace('.1.3.6.1.4.1.9.9.13.1.3.1.2.', '')
            tsensor_descr = fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.3.1.2.%s' % tsensor_id]
            tsensor_value = fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.3.1.3.%s' % tsensor_id].split()[0].strip()
            tsensor_state = cisco_env_mon_state[fan_temp_psu_data['.1.3.6.1.4.1.9.9.13.1.3.1.6.%s' % tsensor_id]]

            if tsensor_state != 'normal':
                tsensors_not_ok += 1
                nagios.critical("temperature: '%s' --> %s (%s°C)" % (tsensor_descr, tsensor_state, tsensor_value))

            nagios.ok(performance_data="temp_%s=%sC" % (
                tsensor_descr.rsplit(',', 1)[0].replace(' ', '_').translate(str.maketrans("", "", '"#,')),
                tsensor_value))

    if tsensors == 1:
        nagios.ok("1 temperature sensor (Status: ok)")
    if tsensors >= 2:
        nagios.ok("%s temperature sensors (Status: %s ok)" % (tsensors, tsensors - tsensors_not_ok))


def check_dlink(nagios, opts, snmplib):
    _ = opts

    # noinspection PyBroadException
    try:
        sys_hardware_version = snmplib.get('1.3.6.1.4.1.171.10.76.10.1.2.0')
        nagios.ok("hardware version: %s" % sys_hardware_version)
    except Exception:
        nagios.ok("hardware version: ???")

    # noinspection PyBroadException
    try:
        sys_firmware_version = snmplib.get('1.3.6.1.4.1.171.10.76.10.1.3.0')
        nagios.ok("firmware version: %s" % sys_firmware_version)
    except Exception:
        nagios.ok("firmware version: ???")


def check_3com(nagios, opts, snmplib):
    _ = opts

    nagios.ok("vendor: 3COM")
    # noinspection PyBroadException
    try:
        nagios.ok("description: %s" % snmplib.get('.1.3.6.1.4.1.43.47.1.1.5.3.0'))
    except Exception:
        pass


def check_switch_status(opts, snmplib):
    nagios = pyhelper.NagiosStatus("Switch")

    device = snmplib.identify_vendor()[0]
    # noinspection PyBroadException
    try:
        device = device.lower()
    except Exception:
        device = ''

    if 'dell' in device:
        check_dell(nagios, opts, snmplib)

    if 'hp' in device:
        check_hp(nagios, opts, snmplib)

    if 'cisco' in device:
        check_cisco(nagios, opts, snmplib)

    if 'dlink dgs' in device:
        check_dlink(nagios, opts, snmplib)

    if '3com' in device:
        check_3com(nagios, opts, snmplib)

    # generic checks

    sys_descr = snmplib.get(".1.3.6.1.2.1.1.1.0")
    sys_contact = snmplib.get('.1.3.6.1.2.1.1.4.0')
    sys_name = snmplib.get('.1.3.6.1.2.1.1.5.0')
    sys_up_time = snmplib.get('.1.3.6.1.2.1.1.3.0')
    sys_location = snmplib.get('.1.3.6.1.2.1.1.6.0')
    if_types = snmplib.walk('.1.3.6.1.2.1.2.2.1.3', bulk=True, dictionary=False)
    physical_ports = 0

    # noinspection PyBroadException
    try:
        for ifType in if_types:
            if ifType[1].strip() != '':
                if ifType[1] == '6':
                    physical_ports += 1
    except Exception:
        physical_ports = None

    sys_descr = sys_descr.replace("\r", "").replace("\n", "")
    nagios.ok("sysDescr: %s, sysName: %s" % (sys_descr, sys_name))

    if sys_contact.strip('"') != '':
        nagios.ok("sysContact: %s" % sys_contact)

    if sys_location.strip('"') != '':
        nagios.ok("sysLocation: %s" % sys_location)

    nagios.ok("sysUpTime: %s, number of ports: %s" % (sys_up_time, physical_ports))

    nagios.exit()


def main():
    opts, snmp = parse_options()
    check_switch_status(opts, snmp)


if __name__ == "__main__":
    main()
